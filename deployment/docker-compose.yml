#
# Production server with UWSGI configured to run on port 8080
# and web configured to run directly on port 80
#
# docker-compose build
# docker-compose up -d web
#
# See accompanying Make commands for easy collectstatic etc.

smtp:
  image: catatnight/postfix
  container_name: djp-smtp
  hostname: postfix
  environment:
    # You could change this to something more suitable
    - maildomain=djangojobportal.com
    - smtp_user=noreply:docker
  restart: unless-stopped

db:
  image: kartoza/postgis:9.6-2.4
  container_name: djp-db
  volumes:
    #- ./pg/postgres_data:/var/lib/postgresql
    - ./backups:/backups
  environment:
    - USERNAME=docker
    - PASS=docker
  restart: unless-stopped
#  Uncomment the next line to have an access with PGAdmin using localhost and port 25432 on your computer.
#  Only for development !
#  ports:
#    - "25432:5432"

uwsgi:
  build: docker
  container_name: djp-uwsgi
  hostname: uwsgi
  environment:
    - DATABASE_NAME=gis
    - DATABASE_USERNAME=docker
    - DATABASE_PASSWORD=docker
    - DATABASE_HOST=db
    - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
    - VIRTUAL_HOST=djp.djangojobportal.com
    - VIRTUAL_PORT=8080
  volumes:
    - ../django_project:/home/web/django_project
    - ./static:/home/web/static:rw
    - ./media:/home/web/media:rw
    - ./reports:/home/web/reports
    - ./logs:/var/log/
  links:
    - smtp:smtp
    - db:db
  restart: unless-stopped
  user: root

dbbackups:
  image: kartoza/pg-backup:9.6
  container_name: djp-db-backup
  hostname: pg-backups
  volumes:
    - ./backups:/backups
  links:
    - db:db
  environment:
    # take care to let the project name below match that
    # declared in the top of the makefile
    - DUMPPREFIX=PG_djp
    # These are all defaults anyway, but setting explicitly in
    # case we ever want to ever use different credentials
    - PGUSER=docker
    - PGPASSWORD=docker
    - PGPORT=5432
    - PGHOST=db
    - PGDATABASE=gis
  restart: unless-stopped

# This is normally the main entry point for a production server
web:
  image: nginx
  container_name: djp-web
  hostname: nginx
  volumes:
    - ./sites-enabled:/etc/nginx/conf.d:ro
    # I dont use volumes_from as I want to use the ro modifier
    - ./static:/home/web/static:ro
    - ./media:/home/web/media:ro
    - ./logs:/var/log/nginx
  links:
    - uwsgi:uwsgi
  ports:
    - "80:8080"
    - "4430:443"
  restart: unless-stopped

# This is the entry point for a development server.
# Run with --no-deps to run attached to the services
# from produ environment if wanted
devweb:
  build: docker
  dockerfile: Dockerfile-dev
  container_name: djp-dev-web
  hostname: uwsgi
  environment:
    - DATABASE_NAME=gis
    - DATABASE_USERNAME=docker
    - DATABASE_PASSWORD=docker
    - DATABASE_HOST=db
    - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
    - PYTHONPATH=/home/web/django_project
    - VIRTUAL_HOST=dev.djp.djangojobportal.com
    - VIRTUAL_PORT=8080
  volumes:
    - ../django_project:/home/web/django_project
    - ./static:/home/web/static
    - ./media:/home/web/media
    - ./reports:/home/web/reports
    - ./logs:/var/log/
  links:
    - smtp:smtp
    - db:db
  ports:
    # for django test server
    - "51202:8080"
    # for ssh
    - "51203:22"

btsync-db:
  # BTSync backups for database dumps
  image: kartoza/btsync
  container_name: djp-db-sync
  volumes:
    # We mount RW so that we can use remove peer to clean up old backups off the server
    - ./backups:/web:rw
  env_file:
    # The environment file should define two variables:
    # SECRET: a RW btsync key if the server is a production server
    #         a RO btsync key if it is staging or development machine
    # DEVICE: a unique device name so you can recognise which host is being peered with in btsync
    # See the btsync example env in this folder for a template
    # NOTE:
    # Do not version control the env file as anyone else could peer it and sync
    # our database backups etc.
    - btsync-db.env

btsync-media:
  # BTSync backups for django media
  image: kartoza/btsync
  container_name: djp-media-sync
  volumes:
    # We mount RO as we do not really want peers to change this data
    - ./media:/web:ro
  env_file:
    # The environment file should define two variables:
    # SECRET: a RW btsync key if the server is a production server
    #         a RO btsync key if it is staging or development machine
    # DEVICE: a unique device name so you can recognise which host is being peered with in btsync
    # See the btsync example env in this folder for a template
    # NOTE:
    # Do not version control the env file as anyone else could peer it and sync
    # our media backups etc.
    - btsync-media.env


